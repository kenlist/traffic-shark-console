#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ReturnCode:
  OK = 0
  NETLINK_HTB_ERROR = 1
  UNKNOWN_HTB_ERROR = 2
  NETLINK_NETEM_ERROR = 3
  UNKNOWN_NETEM_ERROR = 4
  NETLINK_FW_ERROR = 5
  UNKNOWN_FW_ERROR = 6

  _VALUES_TO_NAMES = {
    0: "OK",
    1: "NETLINK_HTB_ERROR",
    2: "UNKNOWN_HTB_ERROR",
    3: "NETLINK_NETEM_ERROR",
    4: "UNKNOWN_NETEM_ERROR",
    5: "NETLINK_FW_ERROR",
    6: "UNKNOWN_FW_ERROR",
  }

  _NAMES_TO_VALUES = {
    "OK": 0,
    "NETLINK_HTB_ERROR": 1,
    "UNKNOWN_HTB_ERROR": 2,
    "NETLINK_NETEM_ERROR": 3,
    "UNKNOWN_NETEM_ERROR": 4,
    "NETLINK_FW_ERROR": 5,
    "UNKNOWN_FW_ERROR": 6,
  }


class Delay:
  """
  Attributes:
   - delay
   - jitter
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'delay', None, None, ), # 1
    (2, TType.I32, 'jitter', None, 0, ), # 2
    (3, TType.DOUBLE, 'correlation', None, 0, ), # 3
  )

  def __init__(self, delay=None, jitter=thrift_spec[2][4], correlation=thrift_spec[3][4],):
    self.delay = delay
    self.jitter = jitter
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.delay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.jitter = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Delay')
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.I32, 1)
      oprot.writeI32(self.delay)
      oprot.writeFieldEnd()
    if self.jitter is not None:
      oprot.writeFieldBegin('jitter', TType.I32, 2)
      oprot.writeI32(self.jitter)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 3)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Loss:
  """
  Attributes:
   - percentage
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'percentage', None, None, ), # 1
    (2, TType.DOUBLE, 'correlation', None, 0, ), # 2
  )

  def __init__(self, percentage=None, correlation=thrift_spec[2][4],):
    self.percentage = percentage
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.percentage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Loss')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.DOUBLE, 1)
      oprot.writeDouble(self.percentage)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 2)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Reorder:
  """
  Attributes:
   - percentage
   - gap
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'percentage', None, None, ), # 1
    (2, TType.I32, 'gap', None, 0, ), # 2
    (3, TType.DOUBLE, 'correlation', None, 0, ), # 3
  )

  def __init__(self, percentage=None, gap=thrift_spec[2][4], correlation=thrift_spec[3][4],):
    self.percentage = percentage
    self.gap = gap
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.percentage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.gap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Reorder')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.DOUBLE, 1)
      oprot.writeDouble(self.percentage)
      oprot.writeFieldEnd()
    if self.gap is not None:
      oprot.writeFieldBegin('gap', TType.I32, 2)
      oprot.writeI32(self.gap)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 3)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Corruption:
  """
  Attributes:
   - percentage
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'percentage', None, 0, ), # 1
    (2, TType.DOUBLE, 'correlation', None, 0, ), # 2
  )

  def __init__(self, percentage=thrift_spec[1][4], correlation=thrift_spec[2][4],):
    self.percentage = percentage
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.percentage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Corruption')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.DOUBLE, 1)
      oprot.writeDouble(self.percentage)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 2)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Shaping:
  """
  Attributes:
   - rate
   - delay
   - loss
   - reorder
   - corruption
   - iptables_options
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rate', None, None, ), # 1
    (2, TType.STRUCT, 'delay', (Delay, Delay.thrift_spec), Delay(**{
      "delay" : 0,
    }), ), # 2
    (3, TType.STRUCT, 'loss', (Loss, Loss.thrift_spec), Loss(**{
      "percentage" : 0,
    }), ), # 3
    (4, TType.STRUCT, 'reorder', (Reorder, Reorder.thrift_spec), Reorder(**{
      "percentage" : 0,
    }), ), # 4
    (5, TType.STRUCT, 'corruption', (Corruption, Corruption.thrift_spec), Corruption(**{
      "percentage" : 0,
    }), ), # 5
    (6, TType.LIST, 'iptables_options', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, rate=None, delay=thrift_spec[2][4], loss=thrift_spec[3][4], reorder=thrift_spec[4][4], corruption=thrift_spec[5][4], iptables_options=None,):
    self.rate = rate
    if delay is self.thrift_spec[2][4]:
      delay = Delay(**{
      "delay" : 0,
    })
    self.delay = delay
    if loss is self.thrift_spec[3][4]:
      loss = Loss(**{
      "percentage" : 0,
    })
    self.loss = loss
    if reorder is self.thrift_spec[4][4]:
      reorder = Reorder(**{
      "percentage" : 0,
    })
    self.reorder = reorder
    if corruption is self.thrift_spec[5][4]:
      corruption = Corruption(**{
      "percentage" : 0,
    })
    self.corruption = corruption
    self.iptables_options = iptables_options

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.rate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.delay = Delay()
          self.delay.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.loss = Loss()
          self.loss.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reorder = Reorder()
          self.reorder.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.corruption = Corruption()
          self.corruption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.iptables_options = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.iptables_options.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Shaping')
    if self.rate is not None:
      oprot.writeFieldBegin('rate', TType.I32, 1)
      oprot.writeI32(self.rate)
      oprot.writeFieldEnd()
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.STRUCT, 2)
      self.delay.write(oprot)
      oprot.writeFieldEnd()
    if self.loss is not None:
      oprot.writeFieldBegin('loss', TType.STRUCT, 3)
      self.loss.write(oprot)
      oprot.writeFieldEnd()
    if self.reorder is not None:
      oprot.writeFieldBegin('reorder', TType.STRUCT, 4)
      self.reorder.write(oprot)
      oprot.writeFieldEnd()
    if self.corruption is not None:
      oprot.writeFieldBegin('corruption', TType.STRUCT, 5)
      self.corruption.write(oprot)
      oprot.writeFieldEnd()
    if self.iptables_options is not None:
      oprot.writeFieldBegin('iptables_options', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.iptables_options))
      for iter6 in self.iptables_options:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TrafficControlSetting:
  """
  Attributes:
   - up
   - down
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'up', (Shaping, Shaping.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'down', (Shaping, Shaping.thrift_spec), None, ), # 2
  )

  def __init__(self, up=None, down=None,):
    self.up = up
    self.down = down

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.up = Shaping()
          self.up.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.down = Shaping()
          self.down.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TrafficControlSetting')
    if self.up is not None:
      oprot.writeFieldBegin('up', TType.STRUCT, 1)
      self.up.write(oprot)
      oprot.writeFieldEnd()
    if self.down is not None:
      oprot.writeFieldBegin('down', TType.STRUCT, 2)
      self.down.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TrafficControlRc:
  """
  Attributes:
   - code
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, code=None, message=None,):
    self.code = code
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TrafficControlRc')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TrafficControlException(TException):
  """
  Attributes:
   - code
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, code=None, message=None,):
    self.code = code
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TrafficControlException')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MachineControlState:
  """
  Attributes:
   - ip
   - profile_name
   - is_shaping
   - online
   - last_update_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ip', None, None, ), # 1
    (2, TType.STRING, 'profile_name', None, None, ), # 2
    (3, TType.BOOL, 'is_shaping', None, None, ), # 3
    (4, TType.BOOL, 'online', None, None, ), # 4
    (5, TType.I64, 'last_update_time', None, None, ), # 5
  )

  def __init__(self, ip=None, profile_name=None, is_shaping=None, online=None, last_update_time=None,):
    self.ip = ip
    self.profile_name = profile_name
    self.is_shaping = is_shaping
    self.online = online
    self.last_update_time = last_update_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.profile_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_shaping = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.online = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.last_update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MachineControlState')
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 1)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.profile_name is not None:
      oprot.writeFieldBegin('profile_name', TType.STRING, 2)
      oprot.writeString(self.profile_name)
      oprot.writeFieldEnd()
    if self.is_shaping is not None:
      oprot.writeFieldBegin('is_shaping', TType.BOOL, 3)
      oprot.writeBool(self.is_shaping)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 4)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    if self.last_update_time is not None:
      oprot.writeFieldBegin('last_update_time', TType.I64, 5)
      oprot.writeI64(self.last_update_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MachineControl:
  """
  Attributes:
   - mac
   - state
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mac', None, None, ), # 1
    (2, TType.STRUCT, 'state', (MachineControlState, MachineControlState.thrift_spec), None, ), # 2
  )

  def __init__(self, mac=None, state=None,):
    self.mac = mac
    self.state = state

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.state = MachineControlState()
          self.state.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MachineControl')
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 1)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRUCT, 2)
      self.state.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Profile:
  """
  Attributes:
   - name
   - tc_setting
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRUCT, 'tc_setting', (TrafficControlSetting, TrafficControlSetting.thrift_spec), None, ), # 2
  )

  def __init__(self, name=None, tc_setting=None,):
    self.name = name
    self.tc_setting = tc_setting

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.tc_setting = TrafficControlSetting()
          self.tc_setting.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Profile')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.tc_setting is not None:
      oprot.writeFieldBegin('tc_setting', TType.STRUCT, 2)
      self.tc_setting.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
