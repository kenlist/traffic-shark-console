#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from traffic_shark_thrift import TrafficSharkService
from traffic_shark_thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   getMachineControls()'
  print '  TrafficControlRc updateMachineControl(MachineControl mc)'
  print '  TrafficControlRc shapeMachine(string mac)'
  print '  TrafficControlRc unshapeMachine(string mac)'
  print '   getProfiles()'
  print '  TrafficControlRc addProfile(Profile profile)'
  print '  TrafficControlRc removeProfile(string name)'
  print '  TrafficControlRc exportPcap(string mac)'
  print '  TrafficControlRc getCapturePackets(string mac)'
  print '  TrafficControlRc startCapture(string mac, string capture_filter)'
  print '  TrafficControlRc stopCapture(string mac)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TrafficSharkService.Client(protocol)
transport.open()

if cmd == 'getMachineControls':
  if len(args) != 0:
    print 'getMachineControls requires 0 args'
    sys.exit(1)
  pp.pprint(client.getMachineControls())

elif cmd == 'updateMachineControl':
  if len(args) != 1:
    print 'updateMachineControl requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateMachineControl(eval(args[0]),))

elif cmd == 'shapeMachine':
  if len(args) != 1:
    print 'shapeMachine requires 1 args'
    sys.exit(1)
  pp.pprint(client.shapeMachine(args[0],))

elif cmd == 'unshapeMachine':
  if len(args) != 1:
    print 'unshapeMachine requires 1 args'
    sys.exit(1)
  pp.pprint(client.unshapeMachine(args[0],))

elif cmd == 'getProfiles':
  if len(args) != 0:
    print 'getProfiles requires 0 args'
    sys.exit(1)
  pp.pprint(client.getProfiles())

elif cmd == 'addProfile':
  if len(args) != 1:
    print 'addProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.addProfile(eval(args[0]),))

elif cmd == 'removeProfile':
  if len(args) != 1:
    print 'removeProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.removeProfile(args[0],))

elif cmd == 'exportPcap':
  if len(args) != 1:
    print 'exportPcap requires 1 args'
    sys.exit(1)
  pp.pprint(client.exportPcap(args[0],))

elif cmd == 'getCapturePackets':
  if len(args) != 1:
    print 'getCapturePackets requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCapturePackets(args[0],))

elif cmd == 'startCapture':
  if len(args) != 2:
    print 'startCapture requires 2 args'
    sys.exit(1)
  pp.pprint(client.startCapture(args[0],args[1],))

elif cmd == 'stopCapture':
  if len(args) != 1:
    print 'stopCapture requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopCapture(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
